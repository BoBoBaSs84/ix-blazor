@page "/"
@using SiemensIXBlazor.Components
@using SiemensIXBlazor.Elements;

<PageTitle>Index</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

<Blind Label="demo" Content="loremmm" Id="blind1" CollapsedChangedEvent="(value) => BlindEventHandler(value)" />
<Breadcrumb Id="Brd1" Elements="@breadcrumbElements" ItemClicked="(label) => BreadcrumbEventHandler(label)"></Breadcrumb>
<Button Label="Test button"></Button>
<IconButton Icon="info"></IconButton>
<Checkbox Id="testcbx" Label="Test Cbx" OnChangeEvent="(value) => CbxOnChanged(value)"></Checkbox>
<Chip Icon="print" Label="Chip with icon" Id="chip1" Closable="true" ClosedEvent="@ChipClosedEventHandler"></Chip>
<DatePicker From="2023/02/01" To="2023/02/15" Id="timepicker1" DateChangeEvent="(date) => DateChangeEventTest(date)"></DatePicker>
@*<DropdownButton Label="Test" Icon="star" DropdownItemElements="dropdownItemElements" OnClickEvent="(args) => DropdownButtonClicked(args)"></DropdownButton>*@
<Button Id="trigger1" Label="Trigger Button"></Button>
<Dropdown Id="dd1" Trigger="trigger1" DropdownItemElements="dropdownItemElements" ShowChangedEvent="(value) => DropdownShowChanged(value)"></Dropdown>
<DateTimePicker 
    DateChangeEvent="(date) => DateChangeEventTest(date)" 
    From="2023/02/01" 
    To="2023/02/15" 
    Id="datetimepicker1"
    TimeChangeEvent="(date) => DateChangeEventTest(date)"></DateTimePicker>

<Drawer Id="drawer1">
    <span>Some content of drawer</span>
</Drawer>

<EventList>
    <EventListItem Id="1" Label="Item 1" ItemCLickEvent="(label) => DropdownButtonClicked(label)"></EventListItem>
    <EventListItem Id="2" Label="Item 2" ItemCLickEvent="(label) => DropdownButtonClicked(label)"></EventListItem>
    <EventListItem Id="3" Label="Item 3" ItemCLickEvent="(label) => DropdownButtonClicked(label)"></EventListItem>
</EventList>

<ExpandingSearch Id="exp-search" ValueChangedEvent="(value) => SearchValueChanged(value)"></ExpandingSearch>

<Select Id="select-1" Mode="multiple" ItemSelectionChangeEvent="(items) => ItemSelectionChangedEvent(items)">
    <SelectItem Id="select-item-1" Label="Item 1" Value="1"></SelectItem>
    <SelectItem Id="select-item-2" Label="Item 2" Value="2" ItemClickEvent="(item) => BreadcrumbEventHandler(item)"></SelectItem>
    <SelectItem Id="select-item-2" Label="Item 3" Value="3"></SelectItem>
</Select>

<Spinner></Spinner>

<SplitButton Id="split-button-1" Label="Split Button" SplitIcon="chevron-down-small" ButtonClickedEvent="SplitButtonClicked"></SplitButton>



@code {
    List<BreadcrumbElement> breadcrumbElements = new()
    {
        new BreadcrumbElement()
        {
            Label = "item1"
        },
        new BreadcrumbElement()
        {
            Label = "item2"
        },
        new BreadcrumbElement()
        {
            Label = "item3"
        }
    };

    List<DropdownItemElement> dropdownItemElements = new()
    {
        new DropdownItemElement()
        {
            Label = "Item 1",
            Value = "1"
        },
        new DropdownItemElement()
        {
            Label = "Item 2",
            Value = "2"
        }
    };

    private void BlindEventHandler(bool value)
    {
        Console.WriteLine(value);
    }

    private void BreadcrumbEventHandler(string label)
    {
        Console.WriteLine(label);
    }

    private void CbxOnChanged(bool value)
    {
        Console.WriteLine(value);
    }

    private void ChipClosedEventHandler()
    {
        Console.WriteLine("chip closed event");
    }

    private void DateChangeEventTest(string date)
    {
        Console.WriteLine(date);
    }

    private void DropdownButtonClicked(object args)
    {
        Console.WriteLine(args);
    }
    private void DropdownShowChanged(bool value)
    {
        Console.WriteLine(value);
    }
    private void SearchValueChanged(string value)
    {
        Console.WriteLine(value);
    }
    private void ItemSelectionChangedEvent(string[] value)
    {
        Console.WriteLine(value);
    }
    private void SplitButtonClicked()
    {
        Console.WriteLine();
    }
}